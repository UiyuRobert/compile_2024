declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putchar(i32)
declare void @putstr(i8*)

@str = dso_local global [4 x i8] c"abc\00", align 1
@str4 = dso_local constant [4 x i8] c"abc\00", align 1


define dso_local i32 @main() {
	%var1 = alloca i32
	store i32 4, i32* %var1
	%var2 = alloca i8
	store i8 9, i8* %var2
	%var3 = load i32, i32* %var1
	%var4 = icmp eq i32 0, %var3
	%var5 = zext i1 %var4 to i32
	%var6 = icmp ne i32 %var5, 0
	br i1 %var6, label %Label2, label %Label1

Label2:
	%var7 = alloca [4 x i8]
	%var8 = getelementptr inbounds [4 x i8], [4 x i8]* %var7, i32 0, i32 0
	store i8 97, i8* %var8
	%var9 = getelementptr inbounds [4 x i8], [4 x i8]* %var7, i32 0, i32 1
	store i8 98, i8* %var9
	%var10 = getelementptr inbounds [4 x i8], [4 x i8]* %var7, i32 0, i32 2
	store i8 99, i8* %var10
	%var11 = getelementptr inbounds [4 x i8], [4 x i8]* %var7, i32 0, i32 3
	store i8 0, i8* %var11
	%var12 = alloca [4 x i8]
	%var13 = getelementptr inbounds [4 x i8], [4 x i8]* %var12, i32 0, i32 0
	store i8 97, i8* %var13
	%var14 = getelementptr inbounds [4 x i8], [4 x i8]* %var12, i32 0, i32 1
	store i8 98, i8* %var14
	%var15 = getelementptr inbounds [4 x i8], [4 x i8]* %var12, i32 0, i32 2
	store i8 99, i8* %var15
	%var16 = getelementptr inbounds [4 x i8], [4 x i8]* %var12, i32 0, i32 3
	store i8 0, i8* %var16
	br label %Label1

Label1:
	ret i32 0
}
