declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putchar(i32)
declare void @putstr(i8*)

@MAX_SIZE = dso_local constant i32 10
@global_var = dso_local global i32 0
@str = dso_local global [10 x i8] c"3\27\00\00\00\00\00\00\00\00", align 1

@.str = private unnamed_addr constant [10 x i8] c"22373040\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"Input integer: \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"Input character: \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"i is 4 or 9!\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"j is 32!\0A\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"Sum of array elements: \00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"Test finished!\0A\00", align 1

define dso_local i32 @add(i32 %var1, i32 %var2) {
	%var3 = alloca i32
	store i32 %var1, i32* %var3
	%var4 = load i32, i32* %var3
	%var5 = alloca i32
	store i32 %var2, i32* %var5
	%var6 = load i32, i32* %var5
	%var7 = add nsw i32 %var4, %var6
	ret i32 %var7
}
define dso_local i32 @calculate(i32 %var1, i32* %var2) {
	%var3 = alloca i32
	store i32 %var1, i32* %var3
	%var4 = load i32, i32* %var3
	%var5 = alloca i32*
	store i32* %var2, i32** %var5
	%var6 = load i32*, i32** %var5
	%var7 = getelementptr inbounds i32, i32* %var6, i32 0
	%var8 = load i32, i32* %var7
	%val9 = call i32 @add(i32 %var4, i32 %var8)
	%var10 = load i32, i32* %var3
	%var11 = getelementptr inbounds i32, i32* %var6, i32 1
	%var12 = load i32, i32* %var11
	%var13 = sub nsw i32 %var10, %var12
	%var14 = mul nsw i32 %val9, %var13
	%var15 = getelementptr inbounds i32, i32* %var6, i32 2
	%var16 = load i32, i32* %var15
	%var17 = sdiv i32 %var14, %var16
	%var18 = load i32, i32* %var3
	%var19 = srem i32 %var17, %var18
	%var20 = sub nsw i32 0, 3
	%var21 = sub nsw i32 0, %var20
	%var22 = sub nsw i32 0, %var21
	%var23 = sub nsw i32 %var19, %var22
	%var24 = sub nsw i32 0, 6
	%var25 = sub nsw i32 0, %var24
	%var26 = add nsw i32 %var23, %var25
	%var27 = alloca i32
	store i32 %var26, i32* %var27
	%var28 = load i32, i32* %var27
	ret i32 1
	ret i32 0
	%var29 = sub nsw i32 0, 1
	ret i32 %var29
}
define dso_local void @printName() {
	%var1 = load i32, i32* @global_var
	%var2 = add nsw i32 %var1, 1
	store i32 %var2, i32* @global_var
	%var4 = load i32, i32* @global_var
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
	ret void
}
define dso_local void @print(i8 %var1) {
	%var2 = alloca i8
	store i8 %var1, i8* %var2
	%var3 = load i8, i8* %var2
	%var4 = zext i8 %var3 to i32
	call void @putchar(i32 %var4)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
	ret void
}
define dso_local i8 @get_first(i8* %var1) {
	%var2 = alloca i8*
	store i8* %var1, i8** %var2
	%var3 = load i8*, i8** %var2
	%var4 = getelementptr inbounds i8, i8* %var3, i32 0
	%var5 = load i8, i8* %var4
	%var6 = zext i8 %var5 to i32
	%var7 = trunc i32 %var6 to i8
	ret i8 %var7
}
define dso_local i32 @main() {
	call void @printName()
	%var1 = alloca i32
	store i32 0, i32* %var1
	%var2 = alloca i32
	store i32 8, i32* %var2
	%var3 = alloca i8
	%var4 = call i32 @getint()
	store i32 %var4, i32* %var1
	%var5 = call i32 @getchar()
	%var6 = trunc i32 %var5 to i8
	store i8 %var6, i8* %var3
	call void @putstr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
	%var7 = load i32, i32* %var1
	call void @putint(i32 %var7)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0))
	%var8 = load i8, i8* %var3
	%var9 = zext i8 %var8 to i32
	call void @putchar(i32 %var9)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
	%var10 = alloca [10 x i32]
	%var11 = alloca [12 x i8]
	%var12 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 0
	store i8 113, i8* %var12
	%var13 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 1
	store i8 119, i8* %var13
	%var14 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 2
	store i8 101, i8* %var14
	%var15 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 3
	store i8 114, i8* %var15
	%var16 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 4
	store i8 116, i8* %var16
	%var17 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 5
	store i8 121, i8* %var17
	%var18 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 6
	store i8 117, i8* %var18
	%var19 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 7
	store i8 105, i8* %var19
	%var20 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 8
	store i8 111, i8* %var20
	%var21 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 9
	store i8 112, i8* %var21
	%var22 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 10
	store i8 92, i8* %var22
	%var23 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 11
	store i8 110, i8* %var23
	%var24 = alloca [10 x i8]
	%var25 = getelementptr inbounds [10 x i8], [10 x i8]* %var24, i32 0, i32 0
	store i8 115, i8* %var25
	%var26 = getelementptr inbounds [10 x i8], [10 x i8]* %var24, i32 0, i32 1
	store i8 116, i8* %var26
	%var27 = getelementptr inbounds [10 x i8], [10 x i8]* %var24, i32 0, i32 2
	store i8 114, i8* %var27
	%var28 = getelementptr inbounds [10 x i8], [10 x i8]* %var24, i32 0, i32 3
	store i8 0, i8* %var28
	%var29 = getelementptr inbounds [10 x i8], [10 x i8]* %var24, i32 0, i32 4
	store i8 0, i8* %var29
	%var30 = getelementptr inbounds [10 x i8], [10 x i8]* %var24, i32 0, i32 5
	store i8 0, i8* %var30
	%var31 = getelementptr inbounds [10 x i8], [10 x i8]* %var24, i32 0, i32 6
	store i8 0, i8* %var31
	%var32 = getelementptr inbounds [10 x i8], [10 x i8]* %var24, i32 0, i32 7
	store i8 0, i8* %var32
	%var33 = getelementptr inbounds [10 x i8], [10 x i8]* %var24, i32 0, i32 8
	store i8 0, i8* %var33
	%var34 = getelementptr inbounds [10 x i8], [10 x i8]* %var24, i32 0, i32 9
	store i8 0, i8* %var34
	%var35 = load i32, i32* %var1
	%var36 = load i32, i32* @MAX_SIZE
	%var37 = load i32, i32* %var1
	%var38 = add nsw i32 %var37, 1
	%var39 = load i32, i32* %var1
	%var40 = getelementptr inbounds [10 x i32], [10 x i32]* %var10, i32 0, i32 %var39
	%var41 = load i32, i32* %var1
	store i32 %var41, i32* %var40
	%var43 = load i32, i32* %var1
	%var44 = load i32, i32* %var1
	%var45 = load i8, i8* %var3
	%var46 = zext i8 %var45 to i32
	%var47 = load i32, i32* %var1
	call void @putstr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0))
	%var48 = alloca i32
	%var49 = load i32, i32* %var48
	%var50 = load i32, i32* %var48
	%var51 = add nsw i32 %var49, %var50
	%var52 = load i32, i32* %var48
	%var53 = load i32, i32* %var48
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0))
	%var54 = load i32, i32* %var1
	%var55 = srem i32 %var54, 2
	%var56 = alloca [20 x i32]
	%var57 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 0
	store i32 3, i32* %var57
	%var58 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 1
	store i32 2, i32* %var58
	%var59 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 2
	store i32 1, i32* %var59
	%var60 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 3
	store i32 0, i32* %var60
	%var61 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 4
	store i32 0, i32* %var61
	%var62 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 5
	store i32 0, i32* %var62
	%var63 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 6
	store i32 0, i32* %var63
	%var64 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 7
	store i32 0, i32* %var64
	%var65 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 8
	store i32 0, i32* %var65
	%var66 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 9
	store i32 0, i32* %var66
	%var67 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 10
	store i32 0, i32* %var67
	%var68 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 11
	store i32 0, i32* %var68
	%var69 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 12
	store i32 0, i32* %var69
	%var70 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 13
	store i32 0, i32* %var70
	%var71 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 14
	store i32 0, i32* %var71
	%var72 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 15
	store i32 0, i32* %var72
	%var73 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 16
	store i32 0, i32* %var73
	%var74 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 17
	store i32 0, i32* %var74
	%var75 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 18
	store i32 0, i32* %var75
	%var76 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 19
	store i32 0, i32* %var76
	%var77 = alloca i32
	store i32 0, i32* %var77
	%var78 = alloca i32
	store i32 0, i32* %var78
	%var79 = load i32, i32* %var78
	%var80 = load i32, i32* @MAX_SIZE
	%var81 = load i32, i32* %var78
	%var82 = add nsw i32 %var81, 1
	%var83 = load i32, i32* %var78
	%var84 = load i32, i32* %var77
	%var85 = load i32, i32* %var78
	%var86 = getelementptr inbounds [20 x i32], [20 x i32]* %var56, i32 0, i32 %var85
	%var87 = load i32, i32* %var86
	%var88 = add nsw i32 %var84, %var87
	store i32 %var88, i32* %var77
	call void @putstr(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0))
	%var90 = load i32, i32* %var77
	call void @putint(i32 %var90)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
	%var91 = load i32, i32* %var1
	%var92 = getelementptr inbounds [10 x i32], [10 x i32]* %var10, i32 0, i32 0
	%val93 = call i32 @calculate(i32 %var91, i32* %var92)
	%var94 = getelementptr inbounds [12 x i8], [12 x i8]* %var11, i32 0, i32 0
	%val95 = call i8 @get_first(i8* %var94)
	call void @print(i8 %val95)
	call void @putstr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0))
	ret i32 0
}
